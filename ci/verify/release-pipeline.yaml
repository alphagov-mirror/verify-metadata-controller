---
apiVersion: concourse.govsvc.uk/v1beta1
kind: Pipeline
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: release
spec:
  exposed: true
  config:

    github_source: &github_source
      uri: https://github.com/alphagov/verify-metadata-controller.git
      organization: alphagov
      owner: alphagov
      repository: verify-metadata-controller
      github_api_token: ((github.api-token))
      access_token: ((github.api-token))
      approvers: ((trusted-developers.github-accounts))
      required_approval_count: 2

    task_toolbox: &task_toolbox
      type: docker-image
      source:
        repository: ((concourse.task-toolbox-image))
        tag: ((concourse.task-toolbox-tag))

    resource_types:

    - name: github
      type: registry-image
      source:
        repository: ((concourse.github-resource-image))
        tag: ((concourse.github-resource-tag))

    resources:

    - name: src
      type: github
      icon: github-circle
      source:
        <<: *github_source
        branch: master

    - name: release
      type: github-release
      icon: tag
      source:
        <<: *github_source

    - name: vmc-image
      type: registry-image
      icon: docker
      source: &ecr_source
        username: ((pipeline.ImageRegistryUsername))
        password: ((pipeline.ImageRegistryPassword))
        repository: ((metadata-controller.ImageRepositoryURI))

    - name: cloudhsm-image
      type: registry-image
      icon: folder-key-network
      source:
        <<: *ecr_source
        repository: ((cloudhsm-client.ImageRepositoryURI))

    jobs:

    - name: build
      serial: true
      plan:

      - get: src
        trigger: true

      - task: build
        privileged: true
        config: &build_config
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
            version:
              digest: sha256:cfb2983956145f54a4996c2aff5fc598856c8722922a6e73f9ebfa3d9b3f9813
          params:
            CONTEXT: src
          inputs:
          - name: src
          outputs:
          - name: image
          caches:
          - path: cache
          run:
            path: build
      - put: vmc-image
        params: &image_put_params
          image: image/image.tar
          additional_tags: src/.git/short_ref

    - name: release
      serial: true
      plan:

      - in_parallel:
          steps:
          - get: src
            passed: [build]
            trigger: true
          - get: vmc-image
            passed: [build]
            trigger: true
            params: {skip_download: true}
          - get: cloudhsm-image
            trigger: true
            params: {skip_download: true}
          - get: release

      - task: generate-chart-values
        config:
          platform: linux
          image_resource: *task_toolbox
          inputs:
          - name: src
          - name: vmc-image
          - name: cloudhsm-image
          outputs:
          - name: chart-values
          params:
            VMC_REPOSITORY_URI: ((metadata-controller.ImageRepositoryURI))
            CLOUDHSM_CLIENT_REPOSITORY_URI: ((cloudhsm-client.ImageRepositoryURI))
          run:
            path: /bin/bash
            args:
              - -euc
              - |
                echo "Generating helm values for latest image versions..."
                mkdir -p chart-values
                cat << EOF > ./overrides.yaml
                vmc:
                  image:
                    repository: $VMC_REPOSITORY_URI@$(cat vmc-image/digest | cut -d ':' -f 1)
                    tag: $(cat vmc-image/digest | cut -d ':' -f 2)
                hsm:
                  image:
                    repository: $CLOUDHSM_CLIENT_REPOSITORY_URI@$(cat cloudhsm-image/digest | cut -d ':' -f 1)
                    tag: $(cat cloudhsm-image/digest | cut -d ':' -f 2)
                EOF
                echo "Merging with chart values..."
                spruce merge ./src/chart/values.yaml ./overrides.yaml | tee -a chart-values/values.yaml

      - task: generate-chart-version
        config:
          platform: linux
          image_resource: *task_toolbox
          inputs:
          - name: release
          outputs:
          - name: chart-version
          params:
            CLUSTER_DOMAIN: ((cluster.domain))
          run:
            path: /bin/bash
            args:
            - -euc
            - |
              echo "Bumping release number..."
              CURRENT_TAG=$(cat release/tag)
              awk -F. '/[0-9]+\./{$NF++;print}' OFS=. <<< "${CURRENT_TAG}" > chart-version/tag
              NEW_TAG=$(cat chart-version/tag)
              echo "${NEW_TAG}" > chart-version/name
              cat chart-version/name

      - task: generate-chart-package
        config:
          platform: linux
          image_resource: *task_toolbox
          inputs:
          - name: src
          - name: chart-version
          - name: chart-values
          outputs:
          - name: chart-package
          params:
            CLUSTER_PRIVATE_KEY: ((cluster.privateKey))
          run:
            path: /bin/bash
            args:
            - -euc
            - |
              echo "Preparing keyring..."
              echo "${CLUSTER_PRIVATE_KEY}" > key
              gpg --import key
              gpg --export-secret-keys > ~/.gnupg/pubring.gpg
              KEY_ID="$(gpg --list-secret-keys --with-colons  | awk -F: '/uid:/ {print $10}' | head -n1)"
              echo "Building chart with release values..."
              CHART_NAME=$(yq . < ./src/chart/Chart.yaml | jq -r .name)
              cp -r "./src/chart" "./${CHART_NAME}"
              cp "./chart-values/values.yaml" "./${CHART_NAME}/values.yaml"
              mkdir -p chart-package
              APP_VERSION=$(cat ./src/.git/short_ref)
              CHART_VERSION=$(cat ./chart-version/tag)
              echo "Generating signed (${KEY_ID}) helm package for ${CHART_NAME} at app-version: '${APP_VERSION}' chart-version: '${CHART_VERSION}'..."
              helm package \
                --app-version "${APP_VERSION}" \
                --version "${CHART_VERSION}" \
                --destination "./chart-package/" \
                --save=false \
                --sign \
                --key "${KEY_ID}" \
                "./${CHART_NAME}"
              echo "Verifying package signature..."
              helm verify ./chart-package/*.tgz
              echo "OK!"

      - put: release
        params:
          name: chart-version/name
          tag: chart-version/tag
          globs:
          - chart-package/*
