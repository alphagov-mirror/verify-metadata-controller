// Code generated by counterfeiter. DO NOT EDIT.
package hsmfakes

import (
	"sync"

	"github.com/alphagov/verify-metadata-controller/pkg/hsm"
)

type FakeClient struct {
	CreateChainedCertStub        func(string, hsm.Credentials, hsm.CertRequest) ([]byte, error)
	createChainedCertMutex       sync.RWMutex
	createChainedCertArgsForCall []struct {
		arg1 string
		arg2 hsm.Credentials
		arg3 hsm.CertRequest
	}
	createChainedCertReturns struct {
		result1 []byte
		result2 error
	}
	createChainedCertReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	CreateRSAKeyPairStub        func(string, hsm.Credentials) ([]byte, error)
	createRSAKeyPairMutex       sync.RWMutex
	createRSAKeyPairArgsForCall []struct {
		arg1 string
		arg2 hsm.Credentials
	}
	createRSAKeyPairReturns struct {
		result1 []byte
		result2 error
	}
	createRSAKeyPairReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	CreateSelfSignedCertStub        func(string, hsm.Credentials, hsm.CertRequest) ([]byte, error)
	createSelfSignedCertMutex       sync.RWMutex
	createSelfSignedCertArgsForCall []struct {
		arg1 string
		arg2 hsm.Credentials
		arg3 hsm.CertRequest
	}
	createSelfSignedCertReturns struct {
		result1 []byte
		result2 error
	}
	createSelfSignedCertReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	FindOrCreateRSAKeyPairStub        func(string, hsm.Credentials) ([]byte, error)
	findOrCreateRSAKeyPairMutex       sync.RWMutex
	findOrCreateRSAKeyPairArgsForCall []struct {
		arg1 string
		arg2 hsm.Credentials
	}
	findOrCreateRSAKeyPairReturns struct {
		result1 []byte
		result2 error
	}
	findOrCreateRSAKeyPairReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GenerateAndSignMetadataStub        func(hsm.GenerateMetadataRequest) ([]byte, error)
	generateAndSignMetadataMutex       sync.RWMutex
	generateAndSignMetadataArgsForCall []struct {
		arg1 hsm.GenerateMetadataRequest
	}
	generateAndSignMetadataReturns struct {
		result1 []byte
		result2 error
	}
	generateAndSignMetadataReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CreateChainedCert(arg1 string, arg2 hsm.Credentials, arg3 hsm.CertRequest) ([]byte, error) {
	fake.createChainedCertMutex.Lock()
	ret, specificReturn := fake.createChainedCertReturnsOnCall[len(fake.createChainedCertArgsForCall)]
	fake.createChainedCertArgsForCall = append(fake.createChainedCertArgsForCall, struct {
		arg1 string
		arg2 hsm.Credentials
		arg3 hsm.CertRequest
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateChainedCert", []interface{}{arg1, arg2, arg3})
	fake.createChainedCertMutex.Unlock()
	if fake.CreateChainedCertStub != nil {
		return fake.CreateChainedCertStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createChainedCertReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateChainedCertCallCount() int {
	fake.createChainedCertMutex.RLock()
	defer fake.createChainedCertMutex.RUnlock()
	return len(fake.createChainedCertArgsForCall)
}

func (fake *FakeClient) CreateChainedCertCalls(stub func(string, hsm.Credentials, hsm.CertRequest) ([]byte, error)) {
	fake.createChainedCertMutex.Lock()
	defer fake.createChainedCertMutex.Unlock()
	fake.CreateChainedCertStub = stub
}

func (fake *FakeClient) CreateChainedCertArgsForCall(i int) (string, hsm.Credentials, hsm.CertRequest) {
	fake.createChainedCertMutex.RLock()
	defer fake.createChainedCertMutex.RUnlock()
	argsForCall := fake.createChainedCertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) CreateChainedCertReturns(result1 []byte, result2 error) {
	fake.createChainedCertMutex.Lock()
	defer fake.createChainedCertMutex.Unlock()
	fake.CreateChainedCertStub = nil
	fake.createChainedCertReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateChainedCertReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.createChainedCertMutex.Lock()
	defer fake.createChainedCertMutex.Unlock()
	fake.CreateChainedCertStub = nil
	if fake.createChainedCertReturnsOnCall == nil {
		fake.createChainedCertReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.createChainedCertReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateRSAKeyPair(arg1 string, arg2 hsm.Credentials) ([]byte, error) {
	fake.createRSAKeyPairMutex.Lock()
	ret, specificReturn := fake.createRSAKeyPairReturnsOnCall[len(fake.createRSAKeyPairArgsForCall)]
	fake.createRSAKeyPairArgsForCall = append(fake.createRSAKeyPairArgsForCall, struct {
		arg1 string
		arg2 hsm.Credentials
	}{arg1, arg2})
	fake.recordInvocation("CreateRSAKeyPair", []interface{}{arg1, arg2})
	fake.createRSAKeyPairMutex.Unlock()
	if fake.CreateRSAKeyPairStub != nil {
		return fake.CreateRSAKeyPairStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRSAKeyPairReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateRSAKeyPairCallCount() int {
	fake.createRSAKeyPairMutex.RLock()
	defer fake.createRSAKeyPairMutex.RUnlock()
	return len(fake.createRSAKeyPairArgsForCall)
}

func (fake *FakeClient) CreateRSAKeyPairCalls(stub func(string, hsm.Credentials) ([]byte, error)) {
	fake.createRSAKeyPairMutex.Lock()
	defer fake.createRSAKeyPairMutex.Unlock()
	fake.CreateRSAKeyPairStub = stub
}

func (fake *FakeClient) CreateRSAKeyPairArgsForCall(i int) (string, hsm.Credentials) {
	fake.createRSAKeyPairMutex.RLock()
	defer fake.createRSAKeyPairMutex.RUnlock()
	argsForCall := fake.createRSAKeyPairArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) CreateRSAKeyPairReturns(result1 []byte, result2 error) {
	fake.createRSAKeyPairMutex.Lock()
	defer fake.createRSAKeyPairMutex.Unlock()
	fake.CreateRSAKeyPairStub = nil
	fake.createRSAKeyPairReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateRSAKeyPairReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.createRSAKeyPairMutex.Lock()
	defer fake.createRSAKeyPairMutex.Unlock()
	fake.CreateRSAKeyPairStub = nil
	if fake.createRSAKeyPairReturnsOnCall == nil {
		fake.createRSAKeyPairReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.createRSAKeyPairReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateSelfSignedCert(arg1 string, arg2 hsm.Credentials, arg3 hsm.CertRequest) ([]byte, error) {
	fake.createSelfSignedCertMutex.Lock()
	ret, specificReturn := fake.createSelfSignedCertReturnsOnCall[len(fake.createSelfSignedCertArgsForCall)]
	fake.createSelfSignedCertArgsForCall = append(fake.createSelfSignedCertArgsForCall, struct {
		arg1 string
		arg2 hsm.Credentials
		arg3 hsm.CertRequest
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateSelfSignedCert", []interface{}{arg1, arg2, arg3})
	fake.createSelfSignedCertMutex.Unlock()
	if fake.CreateSelfSignedCertStub != nil {
		return fake.CreateSelfSignedCertStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSelfSignedCertReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateSelfSignedCertCallCount() int {
	fake.createSelfSignedCertMutex.RLock()
	defer fake.createSelfSignedCertMutex.RUnlock()
	return len(fake.createSelfSignedCertArgsForCall)
}

func (fake *FakeClient) CreateSelfSignedCertCalls(stub func(string, hsm.Credentials, hsm.CertRequest) ([]byte, error)) {
	fake.createSelfSignedCertMutex.Lock()
	defer fake.createSelfSignedCertMutex.Unlock()
	fake.CreateSelfSignedCertStub = stub
}

func (fake *FakeClient) CreateSelfSignedCertArgsForCall(i int) (string, hsm.Credentials, hsm.CertRequest) {
	fake.createSelfSignedCertMutex.RLock()
	defer fake.createSelfSignedCertMutex.RUnlock()
	argsForCall := fake.createSelfSignedCertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) CreateSelfSignedCertReturns(result1 []byte, result2 error) {
	fake.createSelfSignedCertMutex.Lock()
	defer fake.createSelfSignedCertMutex.Unlock()
	fake.CreateSelfSignedCertStub = nil
	fake.createSelfSignedCertReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateSelfSignedCertReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.createSelfSignedCertMutex.Lock()
	defer fake.createSelfSignedCertMutex.Unlock()
	fake.CreateSelfSignedCertStub = nil
	if fake.createSelfSignedCertReturnsOnCall == nil {
		fake.createSelfSignedCertReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.createSelfSignedCertReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) FindOrCreateRSAKeyPair(arg1 string, arg2 hsm.Credentials) ([]byte, error) {
	fake.findOrCreateRSAKeyPairMutex.Lock()
	ret, specificReturn := fake.findOrCreateRSAKeyPairReturnsOnCall[len(fake.findOrCreateRSAKeyPairArgsForCall)]
	fake.findOrCreateRSAKeyPairArgsForCall = append(fake.findOrCreateRSAKeyPairArgsForCall, struct {
		arg1 string
		arg2 hsm.Credentials
	}{arg1, arg2})
	fake.recordInvocation("FindOrCreateRSAKeyPair", []interface{}{arg1, arg2})
	fake.findOrCreateRSAKeyPairMutex.Unlock()
	if fake.FindOrCreateRSAKeyPairStub != nil {
		return fake.FindOrCreateRSAKeyPairStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findOrCreateRSAKeyPairReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) FindOrCreateRSAKeyPairCallCount() int {
	fake.findOrCreateRSAKeyPairMutex.RLock()
	defer fake.findOrCreateRSAKeyPairMutex.RUnlock()
	return len(fake.findOrCreateRSAKeyPairArgsForCall)
}

func (fake *FakeClient) FindOrCreateRSAKeyPairCalls(stub func(string, hsm.Credentials) ([]byte, error)) {
	fake.findOrCreateRSAKeyPairMutex.Lock()
	defer fake.findOrCreateRSAKeyPairMutex.Unlock()
	fake.FindOrCreateRSAKeyPairStub = stub
}

func (fake *FakeClient) FindOrCreateRSAKeyPairArgsForCall(i int) (string, hsm.Credentials) {
	fake.findOrCreateRSAKeyPairMutex.RLock()
	defer fake.findOrCreateRSAKeyPairMutex.RUnlock()
	argsForCall := fake.findOrCreateRSAKeyPairArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) FindOrCreateRSAKeyPairReturns(result1 []byte, result2 error) {
	fake.findOrCreateRSAKeyPairMutex.Lock()
	defer fake.findOrCreateRSAKeyPairMutex.Unlock()
	fake.FindOrCreateRSAKeyPairStub = nil
	fake.findOrCreateRSAKeyPairReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) FindOrCreateRSAKeyPairReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.findOrCreateRSAKeyPairMutex.Lock()
	defer fake.findOrCreateRSAKeyPairMutex.Unlock()
	fake.FindOrCreateRSAKeyPairStub = nil
	if fake.findOrCreateRSAKeyPairReturnsOnCall == nil {
		fake.findOrCreateRSAKeyPairReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.findOrCreateRSAKeyPairReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GenerateAndSignMetadata(arg1 hsm.GenerateMetadataRequest) ([]byte, error) {
	fake.generateAndSignMetadataMutex.Lock()
	ret, specificReturn := fake.generateAndSignMetadataReturnsOnCall[len(fake.generateAndSignMetadataArgsForCall)]
	fake.generateAndSignMetadataArgsForCall = append(fake.generateAndSignMetadataArgsForCall, struct {
		arg1 hsm.GenerateMetadataRequest
	}{arg1})
	fake.recordInvocation("GenerateAndSignMetadata", []interface{}{arg1})
	fake.generateAndSignMetadataMutex.Unlock()
	if fake.GenerateAndSignMetadataStub != nil {
		return fake.GenerateAndSignMetadataStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateAndSignMetadataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GenerateAndSignMetadataCallCount() int {
	fake.generateAndSignMetadataMutex.RLock()
	defer fake.generateAndSignMetadataMutex.RUnlock()
	return len(fake.generateAndSignMetadataArgsForCall)
}

func (fake *FakeClient) GenerateAndSignMetadataCalls(stub func(hsm.GenerateMetadataRequest) ([]byte, error)) {
	fake.generateAndSignMetadataMutex.Lock()
	defer fake.generateAndSignMetadataMutex.Unlock()
	fake.GenerateAndSignMetadataStub = stub
}

func (fake *FakeClient) GenerateAndSignMetadataArgsForCall(i int) hsm.GenerateMetadataRequest {
	fake.generateAndSignMetadataMutex.RLock()
	defer fake.generateAndSignMetadataMutex.RUnlock()
	argsForCall := fake.generateAndSignMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GenerateAndSignMetadataReturns(result1 []byte, result2 error) {
	fake.generateAndSignMetadataMutex.Lock()
	defer fake.generateAndSignMetadataMutex.Unlock()
	fake.GenerateAndSignMetadataStub = nil
	fake.generateAndSignMetadataReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GenerateAndSignMetadataReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.generateAndSignMetadataMutex.Lock()
	defer fake.generateAndSignMetadataMutex.Unlock()
	fake.GenerateAndSignMetadataStub = nil
	if fake.generateAndSignMetadataReturnsOnCall == nil {
		fake.generateAndSignMetadataReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.generateAndSignMetadataReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createChainedCertMutex.RLock()
	defer fake.createChainedCertMutex.RUnlock()
	fake.createRSAKeyPairMutex.RLock()
	defer fake.createRSAKeyPairMutex.RUnlock()
	fake.createSelfSignedCertMutex.RLock()
	defer fake.createSelfSignedCertMutex.RUnlock()
	fake.findOrCreateRSAKeyPairMutex.RLock()
	defer fake.findOrCreateRSAKeyPairMutex.RUnlock()
	fake.generateAndSignMetadataMutex.RLock()
	defer fake.generateAndSignMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ hsm.Client = new(FakeClient)
